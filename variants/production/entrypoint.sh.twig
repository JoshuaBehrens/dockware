#!/bin/bash

echo ""
echo " _____   ____   _____ _  ____          __     _____  ______ "
echo "|  __ \ / __ \ / ____| |/ /\ \        / /\   |  __ \|  ____|"
echo "| |  | | |  | | |    | ' /  \ \  /\  / /  \  | |__) | |__   "
echo "| |  | | |  | | |    |  <    \ \/  \/ / /\ \ |  _  /|  __|  "
echo "| |__| | |__| | |____| . \    \  /\  / ____ \| | \ \| |____ "
echo "|_____/ \____/ \_____|_|\_\    \/  \/_/    \_\_|  \_\______|"
echo ""
echo "                      _            _   _                 "
echo "                     | |          | | (_)                "
echo "_ __  _ __ ___   __| |_   _  ___| |_ _  ___  _ __        "
echo "|  _ \|  __/ _ \ / _  | | | |/ __| __| |/ _ \|  _ \      "
echo "| |_) | | | (_) | (_| | |_| | (__| |_| | (_) | | | |     "
echo "| .__/|_|  \___/ \__,_|\__,_|\___|\__|_|\___/|_| |_|     "
echo "| |                                                      "
echo "|_|                                                      "
echo ""

echo "68 69 20 64 65 76 65 6C 6F 70 65 72 2C 20 6E 69 63 65 20 74 6F 20 6D 65 65 74 20 79 6F 75"
echo "6c 6f 6f 6b 69 6e 67 20 66 6f 72 20 61 20 6a 6f 62 3f 20 77 72 69 74 65 20 75 73 20 61 74 20 6a 6f 62 73 40 64 61 73 69 73 74 77 65 62 2e 64 65"
echo ""
echo "*******************************************************"
echo "** DOCKWARE IMAGE: {{ orca.image }}"
echo "** Tag: {{ orca.tag }}"
echo "** Version: {{ version }}"
echo "** Built: $(cat /build-date.txt)"
echo "** Copyright 2023 dasistweb GmbH"
echo "*******************************************************"
echo ""
echo "launching dockware...please wait..."
echo ""


set -e

source /etc/apache2/envvars
#source /var/www/.bashrc


if [ ! -f /var/www/.pwdset ]; then
    echo "set new root password as it is not already set ..."
    #this fil will be created ba the dockerfile maintainer of your project Dockerfile, so we know we donÃ¤t have to create a new password for root
    PASSWORD=$(openssl rand -base64 24) #make it random if no password is provied by env
    echo "root:$PASSWORD" | chpasswd
fi;


# this is important to automatically use the bashrc file
# in the "exec" command below when using a simple docker runner command
#export BASH_ENV=/var/www/.bashrc


CONTAINER_STARTUP_DIR=$(pwd)

# it's possible to add a custom boot script on startup.
# so we test if it exists and just execute it
file="/var/www/boot_start.sh"
if [ -f "$file" ] ; then
    sh $file
fi


# before starting any commands
# we always need to ensure we are back in our
# configured WORKDIR of the container
echo "-----------------------------------------------------"
cd $CONTAINER_STARTUP_DIR


rm -rf /etc/php/$PHP_VERSION/fpm/conf.d/20-tideways.ini
rm -rf /etc/php/$PHP_VERSION/cli/conf.d/20-tideways.ini

if [ $TIDEWAYS_KEY != "not-set" ] && [ $TIDEWAYS_CONNECTION != "not-set" ]; then
    echo "DOCKWARE: activating Tideways...."

    #create the INI with >
    echo "tideways.connection=${TIDEWAYS_CONNECTION}" >| /etc/php/$PHP_VERSION/fpm/conf.d/20-tideways.ini
    echo "tideways.connection=${TIDEWAYS_CONNECTION}" >| /etc/php/$PHP_VERSION/cli/conf.d/20-tideways.ini

    #append to fpm  the INI with >>
    echo "extension=tideways.so" >> /etc/php/$PHP_VERSION/fpm/conf.d/20-tideways.ini
    echo "tideways.auto_start=1" >> /etc/php/$PHP_VERSION/fpm/conf.d/20-tideways.ini
    echo "tideways.monitor_cli=1" >> /etc/php/$PHP_VERSION/fpm/conf.d/20-tideways.ini
    echo "tideways.enable_cli=1" >> /etc/php/$PHP_VERSION/fpm/conf.d/20-tideways.ini
    echo "tideways.sample_rate=20" >> /etc/php/$PHP_VERSION/fpm/conf.d/20-tideways.ini
    echo "tideways.api_key=${TIDEWAYS_KEY}" >> /etc/php/$PHP_VERSION/fpm/conf.d/20-tideways.ini

    #append to cli  the INI with >>
    echo "extension=tideways.so" >> /etc/php/$PHP_VERSION/cli/conf.d/20-tideways.ini
    echo "tideways.auto_start=1" >> /etc/php/$PHP_VERSION/cli/conf.d/20-tideways.ini
    echo "tideways.monitor_cli=1" >> /etc/php/$PHP_VERSION/cli/conf.d/20-tideways.ini
    echo "tideways.enable_cli=1" >> /etc/php/$PHP_VERSION/cli/conf.d/20-tideways.ini
    echo "tideways.sample_rate=20" >> /etc/php/$PHP_VERSION/cli/conf.d/20-tideways.ini
    echo "tideways.api_key=${TIDEWAYS_KEY}" >> /etc/php/$PHP_VERSION/cli/conf.d/20-tideways.ini
    echo "-----------------------------------------------------------"
else
  echo "DOCKWARE: launnching without Tideways...."
fi


# --------------------------------------------------
# APACHE
# sometimes the internal docker structure leaves
# some pid files existing. the container will be recreated....but
# in reality it's not! thus there might be the problem
# that an older pid file exists, which leads to the following error:
#   - "httpd (pid 13) already running"
# to avoid this, we simple remove an existing file
rm -f /var/run/apache2/apache2.pid
# start test and start apache
echo "DOCKWARE: testing and starting Apache..."
apache2ctl configtest
service apache2 restart
## restart fpm
echo $PHP_VERSION
service php$PHP_VERSION-fpm stop
service php$PHP_VERSION-fpm start
service apache2 restart
update-alternatives --set php /usr/bin/php$PHP_VERSION
php -v

cd /var/www/html
echo "-----------------------------------------------------------"
# --------------------------------------------------




# now let's check if we have a custom boot script that
# should run after our other startup scripts.
file="/var/www/boot_end.sh"
if [ -f "$file" ] ; then
    sh $file
fi


# ------------------------------------------------------------------------------------------------------------------------------
# ------------------------------------------------------------------------------------------------------------------------------
# ------------------------------------------------------------------------------------------------------------------------------
# ------------------------------------------------------------------------------------------------------------------------------
# ------------------------------------------------------------------------------------------------------------------------------


echo ""
echo "WOHOOO, dockware/{{ orca.image }}:{{ orca.tag }} IS READY :) - let's get started"
echo "-----------------------------------------------------"
echo "DOCKWARE CHANGELOG: /var/www/CHANGELOG.md"
echo "PHP: $(php -v | grep cli)"
echo "Apache DocRoot: ${APACHE_DOCROOT}"

echo ""
echo "What's new in this version? see the changelog for further details"
echo "https://www.shopware.com/de/changelog/"
echo ""

#lets change the user to the web user which acts as www-data so we will not have permission troubles
su web
# ------------------------------------------------------------------------------------------------------------------------------
# ------------------------------------------------------------------------------------------------------------------------------
# ------------------------------------------------------------------------------------------------------------------------------
# ------------------------------------------------------------------------------------------------------------------------------
# ------------------------------------------------------------------------------------------------------------------------------

# always execute custom commands in here.
# if a custom command is provided, then the container
# will automatically exit after it.
# that's somehow just how it works.
# otherwise it will continue with the code below
exec "$@"



# we still need this to allow custom events
# such as our BUILD_PLUGIN feature to exit the container
if [[ ! -z "$DOCKWARE_CI" ]]; then
    # CONTAINER WAS STARTED IN NON-BLOCKING CI MODE...."
    # DOCKWARE WILL NOW EXIT THE CONTAINER"
    echo ""
else
    tail -f /dev/null
fi
