version: 2.1

parameters:
    imageName:
        type: string
        default: "false"
    imageTag:
        type: string
        default: "false"
    doBuildImage:
        description: make sure a push does not trigger any workflow
        type: boolean
        default: false
    buildShopwareVersion:
        description: make sure a push does not trigger any workflow
        type: string
        default: ""

workflows:
    release-single-image:
        when:
            and:
                -   equal: [true, << pipeline.parameters.doBuildImage >>]
        jobs:
            -   build-image-arm64:
                    imageName: << pipeline.parameters.imageName >>
                    imageTag: << pipeline.parameters.imageTag >>
            -   build-image-amd64:
                    imageName: << pipeline.parameters.imageName >>
                    imageTag: << pipeline.parameters.imageTag >>

            -   create-manifest-push:
                    imageName: << pipeline.parameters.imageName >>
                    imageTag: << pipeline.parameters.imageTag >>
                    requires:
                        - build-image-arm64
                        - build-image-amd64

    release-shopware-version:
        when:
            and:
                -   not:
                        equal: ["", << pipeline.parameters.buildShopwareVersion >>]
        jobs:
            -   build-image-arm64:
                    imageName: "dev"
                    name: build-shopware-play-arm64
                    imageTag: << pipeline.parameters.buildShopwareVersion >>
            -   build-image-arm64:
                    name: build-shopware-play-arm64
                    imageName: "play"
                    imageTag: << pipeline.parameters.buildShopwareVersion >>

            -   build-image-amd64:
                    name: build-shopware-dev-amd64
                    imageName: "dev"
                    imageTag: << pipeline.parameters.buildShopwareVersion >>

            -   build-image-amd64:
                    name: build-shopware-play-amd64
                    imageName: "play"
                    imageTag: << pipeline.parameters.buildShopwareVersion >>

            -   create-manifest-push:
                    imageName: "dev"
                    imageTag: << pipeline.parameters.buildShopwareVersion >>
                    requires:
                        - build-shopware-dev-amd64
                        - build-shopware-dev-arm64

            -   create-manifest-push:
                    imageName: "play"
                    imageTag: << pipeline.parameters.buildShopwareVersion >>
                    requires:
                        - build-shopware-play-amd64
                        - build-shopware-play-arm64


# Define a job to be invoked later in a workflow.
# See: https://circleci.com/docs/2.0/configuration-reference/#jobs
jobs:
    build-image-arm64:
        parameters:
            imageName:
                type: string
            imageTag:
                type: string

        machine:
            image: ubuntu-2204:current
            docker_layer_caching: true
        resource_class: arm.medium

        steps:
            - checkout
            - install_requirements
            -   build_and_push_image:
                    imageName: <<parameters.imageName>>
                    imageTag: <<parameters.imageTag>>
                    imageArch: "arm64"

    build-image-amd64:
        machine:
            image: ubuntu-2204:current
            docker_layer_caching: true
        resource_class: medium

        parameters:
            imageName:
                type: string
            imageTag:
                type: string
        steps:
            - checkout
            - install_requirements
            -   build_and_push_image:
                    imageName: << parameters.imageName >>
                    imageTag: << parameters.imageTag >>
                    imageArch: "amd64"

    create-manifest-push:
        machine:
            image: ubuntu-2204:current
            docker_layer_caching: true
        resource_class: medium

        parameters:
            imageName:
                type: string
            imageTag:
                type: string

        steps:
            -   run:
                    name: Publish Docker Image to Docker Hub
                    command: |
                        echo "$DOCKERHUB_PASS" | docker login -u "$DOCKERHUB_USERNAME" --password-stdin

            -   run: docker manifest create dockerhub.com/dockware/<< parameters.imageName >>:<< parameters.imageTag >> --amend dockerhub.com/dockware/<< parameters.imageName >>:<< parameters.imageTag >>-amd64 --amend dockerhub.com/dockware/<< parameters.imageName >>:<< parameters.imageTag >>-arm64
            -   run: docker manifest push dockerhub.com/dockware/<< parameters.imageName >>:<< parameters.imageTag >>


commands:
    install_requirements:
        steps:
            -   run: sudo apt-get update
            -   run: sudo apt-get install -y php-cli php-xml unzip
            -   run: php -r "copy('https://getcomposer.org/installer', 'composer-setup.php');"
            -   run: php composer-setup.php
            -   run: sudo mv composer.phar /usr/local/bin/composer

            #Install Dependencies
            -   run: make install

            #ORCA Generate
            -   run: make generate phar=1 -B


    build_and_push_image:
        parameters:
            imageName:
                type: string
            imageTag:
                type: string
            imageArch:
                type: string
        steps:
            #Verify Configuration
            -   run: make verify image=<< parameters.imageName >> tag=<< parameters.imageTag >> -B

            #name: Build Image
            -   run: cd ./dist/images/<< parameters.imageName >>/<< parameters.imageTag >> && DOCKER_BUILDKIT=1 docker build -t dockware/<< parameters.imageName >>:<< parameters.imageTag >> .

            # Run SVRUnit Tests
            -   run: make test image=<< parameters.imageName >> tag=<< parameters.imageTag >> -B
            -   run:
                    name: Publish Docker Image to Docker Hub
                    command: |
                        echo "$DOCKERHUB_PASS" | docker login -u "$DOCKERHUB_USERNAME" --password-stdin
            -   run:
                    name: Create alias to push as amd64
                    command: |
                        docker tag dockware/<< parameters.imageName >>:<< parameters.imageTag >> dockware/<< parameters.imageName >>:<< parameters.imageTag >>-<< parameters.imageArch >>
            -   run:
                    name: push amd image
                    command: |
                        docker push dockware/<< parameters.imageName >>:<< parameters.imageTag >>-<< parameters.imageArch >>